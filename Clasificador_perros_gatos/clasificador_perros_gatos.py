'''
Scripts en Python.
Esto c칩digo es una aplicaci칩n en Python que usa una red neuronal convolucional (CNN)
con aumento de datos, para clasificar en tiempo real si la imagen de una c치mara 
muestra un perro o un gato.

Las librer칤as destacadas son las siguientes:
    cv2 - OpenCV para capturar im치genes desde la c치mara y procesarlas.
    PIL - Convierte im치genes para mostrarlas en la interfaz.

Las im치genes las capturamos desde un dispositivo movil a trav칠s de su c치mara. En este
    dispositivo tendremos que tener instalado la app 'DroidCam', que nos presenta
    una direcci칩n https desde donde captura la imagen en la aplicaci칩n de Python.

El modelo de red neuronal fu칠 entrenado en otro script 'entrenamiento_clasi_perros_gatos.py'.
'''

# Importamos las librer칤as.
import numpy as np
import cv2
import sys
from tkinter import *
from keras.models import load_model
from PIL import Image, ImageTk


# Cargamos el modelo.
modelo = load_model('C:/Users/katal/Documents/Python/Videocursos/Clasificador_perros_gatos/perros_gatos_CNN_AD.keras')

# Funci칩n para preprocesar la imagen.
'''
* Convertimos la imagen a una escala de grises, ya que el modelo fue entrenado as칤.
* Redimensionamos la imagen al tama침o del entreno, 100x100 pixeles.
* A침adimos el canal del color, en este caso ser치 escala de grises (100, 100, 1).
* Normalizamos los valores del array de la imagen entre [0, 1].
* A침adimos la dimensi칩n batch.

Con esto modificamos la imagen recibida por la c치mara para ajustarla a la imagen
    utilizada en el entrenamiento.
'''
def preprocesar(imagen):
    imagen = cv2.cvtColor(imagen, cv2.COLOR_BGR2GRAY)
    imagen = cv2.resize(imagen, (100, 100))
    imagen = np.expand_dims(imagen, axis=-1)
    imagen = imagen / 255.0
    imagen = np.expand_dims(imagen, axis=0)
    return imagen

# Libera los recursos si se cierra la ventana.
def onClosing():
    root.quit()
    cap.release()
    print('C치mara desconectada')
    root.destroy()

# Funci칩n principal.
'''
Capturamos un fotograma desde la c치mara, esto dar칤a 'ret' como verdadero, y
    frame como el fotograma. Este frame ser치 el que utilicemos para hacer la
    predicci칩n, despu칠s de preprocesar la imagen.
    * Preprocesamos la imagen con la funci칩n correspondiente.
    * Preparamos la imagen capturada de la c치mara para que pueda mostrarse
        correctamente en la interfaz Tkinter.
        * Convertimos el fotograma de OpenCV a RGBA. La A representa la transparencia.
        * Convertimos la imagen, de una matriz NumPy a un objeto de tipo 
            PIL.Image, para poder mostrarla en TKinter.
        * Redimensionamos la imagen a 400x400. Esta funci칩n mantiene la relaci칩n
            de aspecto original.
    * Hacemos la predicci칩n y lo guardamos en una variable.
    * Convertimos el valor de la predicci칩n en un float y redondeamos su valor
        con 2 decimales.
    * Se decide si es gato o perro con un umbral de 0.5.
    * Se actualiza el texto en la etiqueta.
    * Actualizamos la imagen en la interfaz gr치fica.
        * Convertimos la imagen PIL, en un formato compatible con Tkinter.
            ImageTk.PhotoImage, es necesario para mostrar im치genes en Label u
            otros widgets de TKinter.
        * Actualizamos la etiqueta con la nueva imagen.
        * Almacenamos la imagen como una referencia dentro del objeto Label.
            TKinter elimina im치genes sin referencia, as칤 que esta l칤nea evita que
            la imagen desaparezca por el recolector de basura de Python.
        * Indica que se llame a la funci칩n 'callback()' despu칠s de 30 milisegundos.
            Esto genera un bucle de captura y predicci칩n en tiempo real a 33 fps.
            As칤 se mantiene actualizada tanto la imagen como el resultado del 
                clasificador.
'''
def callback():
    # Capturamos el fotograma.
    ret, frame = cap.read()

    if ret: # Si captura verdadera.
        # Llamamos a la funci칩n preprocesar.
        imagen_preprocesada = preprocesar(frame)
        # Preparamos el frame para mostrarlo en TKinter.
        img = cv2.cvtColor(frame, cv2.COLOR_BGR2RGBA)
        img = Image.fromarray(img)
        img.thumbnail((400, 400))
        # Hacemos la predicci칩n y obtenemos el resultado.
        prediccion = modelo.predict(imagen_preprocesada)
        confianza = float(prediccion[0][0])
        confianza_redondeada = round(confianza, 2)
        # Se comprueba el resultado.
        resultado = '游냠 Gato' if confianza <= .5 else '游냤 Perro'
        resultado_label.config(text=f'Resultado: {resultado}-{confianza_redondeada}')
        # Actualizamos la imagen en la interfaz gr치fica.
        tkimage = ImageTk.PhotoImage(img)
        label.configure(image = tkimage)
        label.image = tkimage
        root.after(30, callback)

    else: # Si captura es falsa, cerramos la aplicaci칩n.
        onClosing()

# Inicializamos la c치mara IP, desde una app, en este caso DroidCam.
url = 'https://192.168.0.13:4343/video'
cap = cv2.VideoCapture(url)

# Comprobamos que la c치mara se ha abierto.
if cap.isOpened():
    print('C치mara inicializada')
else:
    sys.exit('C치mara desconctada')

# Creamos la interfaz gr치fica con Tkinter.
'''
Configuramos qu칠 debe hacer el programa cuando el usuario intenta cerrar la ventana.
    protocol - Llama a una funci칩n del sistema Tkinter para definir comportamientos 
                personalizados.
    WM_DELETE_WINDOW - Es el nombre del evento que se lanza al cerrar la ventana
                        principal.
    onClosing - Es la funci칩n definida anteriormente para liberar recursos y evitar
                que el programa se quede colgado si la camara sigue abierta, y as칤
                recursos como la conexi칩n de video o el modelo de predicci칩n 
                podr칤an no cerrarse correctamente.
'''
root = Tk()
root.protocol('WM_DELETE_WINDOW', onClosing)
root.title('Clasificador Perros y Gatos')

# A침adimos las etiquetas.
'''
La primera etiqueta ser칤a para contener la imagen capturada por la camara, estar칤a
    en una cuadr칤cula, en la primera fila y la primera columna, y con esa separaci칩n
    desde los bordes.
La segunda contendr치 el texto referente al resultado de la predicci칩n, por eso 
    definimos el tipo y el tama침o de letra del mensaje. Estar치 situada en la segunda
    fila y en la primera columna, con una separaci칩n en (y) desde el borde.
'''
label = Label(root)
label.grid(row=0, column=0, padx=5, pady=5)
resultado_label = Label(root, font=('Arial', 16))
resultado_label.grid(row=1, column=0, pady=10)

# Lanzamiento de la app.
# Llamamos a la funci칩n 'callback' cada 30 milisegundos.
root.after(30, callback)
root.mainloop()
